#!/bin/zsh
# start_overnight_training.sh
# Script to run model training overnight on macOS with MPS optimizations.

# Stop on errors and print commands
set -e
set -x # Enable command tracing

echo "Starting Overnight Training Script..."

# --- Configuration ---
# IMPORTANT: Define your training configuration name here.
# This configuration should be defined in your training script (train_transformer.py)
# and should be set up for a long training run (e.g., many epochs, full dataset, no debug/quick-test modes).
TRAINING_CONFIG_NAME="overnight_default" # MODIFY THIS AS NEEDED

# Experiment tag for unique log file names generated by train_transformer.py
EXPERIMENT_TAG="overnight_$(date +"%Y%m%d_%H%M%S")"

# Main log file for this script's output and train_transformer.py's stdout/stderr
LOGS_DIR="logs"
MAIN_LOG_FILE="${LOGS_DIR}/overnight_script_${EXPERIMENT_TAG}.log"

# --- Pre-run Setup ---
echo "Creating logs directory if it doesn't exist: ${LOGS_DIR}"
mkdir -p "${LOGS_DIR}"

echo "Clearing PyTorch MPS cache (if available)..."
python3 -c "import torch; torch.mps.empty_cache() if torch.backends.mps.is_available() and hasattr(torch.mps, 'empty_cache') else print('MPS not available or cache clear not applicable')"

# Optional: Kill any stray Python processes (be cautious with this)
# echo "Attempting to kill stray Python processes..."
# pkill -f python3 || true

echo "Freeing unused system memory (Python gc.collect)..."
python3 -c "import gc; gc.collect()"
sleep 1

# --- Environment Variables for MPS Optimization ---
echo "Setting MPS optimization environment variables..."
export PYTORCH_ENABLE_MPS_FALLBACK=1
export MPS_USE_DETERMINISTIC_ALGORITHM=0  # Can be 0 for performance, 1 for reproducibility if needed
export MPS_CACHED_ALLOCATOR_RELEASE_THREADED=1
export MPS_CACHEABLE_BUFFERS=1
export MPS_PRIMARY_FWD_BUFFER_ALLOCATION=1
export MPS_DISPATCH_THREADS=8 # Adjust based on your CPU cores if needed (e.g., physical core count)
export MPS_MAX_BUFFER_SIZE=536870912 # 512MB; adjust if necessary based on your model and GPU VRAM

echo "--- Environment Information ---"
python3 -c "import torch; print(f'PyTorch Version: {torch.__version__}'); print(f'MPS Available: {torch.backends.mps.is_available()}'); print(f'MPS Built: {torch.backends.mps.is_built()}')"
echo "---------------------------------"

echo "\n======= Starting Training Process ======="
echo "Training Config: ${TRAINING_CONFIG_NAME}"
echo "Experiment Tag: ${EXPERIMENT_TAG}"
echo "Main Log File for this script: ${MAIN_LOG_FILE}"
echo "Training will be run with 'caffeinate' to prevent macOS from sleeping."
echo "Output from train_transformer.py will be logged to ${MAIN_LOG_FILE}."
echo "Additional logs (e.g., GPU monitoring, model checkpoints) should be created by train_transformer.py in '${LOGS_DIR}' or 'model_training/transformer_models/' based on its internal logic, using the experiment tag."
echo "Press Ctrl+C in the terminal running this script to stop caffeinate and the training."

# --- Run Training with Caffeinate ---
# The training script is run in the foreground by caffeinate.
# Caffeinate will exit when the training script finishes or is terminated.
# Using 'tee' to send output to both the console (if running interactively) and the log file.
# stderr is redirected to stdout (2>&1) to capture all output in the log.
caffeinate -i -s python3 model_training/train_transformer.py \
    --config "${TRAINING_CONFIG_NAME}" \
    --experiment-tag "${EXPERIMENT_TAG}" \
    --data-dir "../datasets/processed" \
    --audio-dir "../datasets/e-gmd-v1.0.0" \
    --monitor-gpu \
    # --use-wandb # Uncomment if you want to use Weights & Biases
    # Add any other essential command-line arguments for train_transformer.py here.
    # Ensure that the selected --config within train_transformer.py handles hyperparameters, epochs, paths, etc.
    > >(tee "${MAIN_LOG_FILE}") 2>&1

echo "\n======= Training Process Finished ======="
echo "Main log file for this script: ${MAIN_LOG_FILE}"
echo "Check '${LOGS_DIR}' for other logs generated by the training script (e.g., training_${EXPERIMENT_TAG}.log, gpu_monitoring_${EXPERIMENT_TAG}.csv)."
echo "Overnight training script complete."
